{"version":3,"sources":["components/searchSongComponent.js","actions/searchActions.js","actions/types.js","components/songCard.js","components/songsContainer.js","components/loader.js","components/landing.js","reducers/searchReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["SearchComponent","onChange","e","props","searchSongs","target","value","onSubmit","preventDefault","fetchSongs","text","setLoading","className","id","this","autoFocus","type","placeholder","Component","connect","state","songs","dispatch","payload","axios","get","then","response","data","results","catch","err","console","log","songCard","song","src","artworkUrl100","alt","collectionName","trackName","songsContainer","content","length","map","index","key","loader","LandingWithSearch","loading","initialState","loadingState","combineReducers","actions","middleWare","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ced3144.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { searchSongs, fetchSongs, setLoading } from '../actions/searchActions';\r\n\r\nexport class SearchComponent extends Component {\r\n\r\n    onChange = e => {\r\n        this.props.searchSongs(e.target.value);\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.fetchSongs(this.props.text);\r\n        this.props.setLoading();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='searchFormContainer'>\r\n                <form id='searchForm' onSubmit={this.onSubmit}>\r\n                    <div className=\"lead\">\r\n                        <div className=\"input-group\">\r\n\r\n                            <input \r\n                                autoFocus\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Enter Artist's name\"\r\n                                onChange={this.onChange} />\r\n\r\n                            <div className=\"input-group-append\">\r\n                                <button className=\"btn btn-secondary\" \r\n                                        type=\"button\">\r\n                                    <i className=\"fa fa-search\"></i>\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStatesToProps = state => ({\r\n    text: state.songs.text\r\n})\r\n\r\nexport default connect(mapStatesToProps, {searchSongs, fetchSongs, setLoading})(SearchComponent);","import { SEARCH_SONGS, FETCH_SONGS, LOADING } from './types';\r\n// import { LOADING } from './types';\r\n\r\nimport axios from 'axios';\r\n\r\nexport const searchSongs = text => dispatch => {\r\n    // console.log(text);\r\n    return dispatch ({\r\n        type: SEARCH_SONGS,\r\n        payload: text\r\n    });\r\n}\r\n\r\nexport const fetchSongs = text => dispatch => {\r\n    axios.get(`https://itunes.apple.com/search?term=${text}`)\r\n        .then(response => {\r\n                // console.log(response.data.results);\r\n                return dispatch({\r\n                type: FETCH_SONGS,\r\n                payload: response.data.results\r\n            })\r\n        })\r\n        .catch(err => console.log(\"API REJECTED: \", err));\r\n}\r\n\r\nexport const setLoading = () => {\r\n    return {\r\n        type: LOADING\r\n    };\r\n};","export const SEARCH_SONGS = 'SEARCH_SONGS'\r\nexport const FETCH_SONGS = 'FETCH_SONGS'\r\nexport const LOADING = 'LOADING'\r\n","import React, { Component } from 'react';\r\n\r\nexport default class songCard extends Component {\r\n    render() {\r\n        const { song } = this.props;\r\n        return (\r\n                <div className=\"col-md-3\">\r\n                    <div className=\"card\">\r\n                        <div className='card-img-container'>\r\n                        <img \r\n                            className=\"card-img-top img-fluid\"\r\n                            src={ song.artworkUrl100 } \r\n                            alt={ song.collectionName + \"Art Work\" } />\r\n                        </div>\r\n                        <div className=\"card-block\">\r\n                            <b><em className=\"card-title\">{ song.trackName } - { song.collectionName }</em></b>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                )\r\n            }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SongCard from './songCard';\r\n\r\nclass songsContainer extends Component {\r\n    render() {\r\n        const { songs } = this.props;\r\n        let content = '';\r\n        content = songs.length > 0 ? songs.map((song, index) => <SongCard key={index} song={song} />) : null;\r\n        return (\r\n            <div className='row songsContainer'>\r\n                { content }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    songs: state.songs.songs\r\n});\r\n\r\nexport default connect(mapStateToProps)(songsContainer);","import React from 'react'\r\n\r\nexport default function loader () { \r\n    return ( \r\n        <div className='loader'></div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport SearchSongComponent from './searchSongComponent';\r\nimport SongsContainer from './songsContainer';\r\nimport Loader from './loader';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass LandingWithSearch extends Component {\r\n    render() {\r\n\r\n        const { loading } = this.props;\r\n        // console.log(loading);\r\n\r\n        return (\r\n            <div className='container'>\r\n                <div className=\"jumbotron\">\r\n                    <h1 className=\"display-4\">Search For Artists</h1>\r\n                    <br />\r\n                    <SearchSongComponent />\r\n                </div>\r\n                { loading ? <Loader /> : <SongsContainer /> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStatesToProps = state => ({\r\n    loading: state.songs.loading\r\n});\r\n\r\nexport default connect(mapStatesToProps)(LandingWithSearch);","import {SEARCH_SONGS, FETCH_SONGS, LOADING} from '../actions/types';\r\n\r\nconst initialState = {\r\n    text: '',\r\n    songs: [],\r\n    loadingState: false,\r\n    song: []\r\n};\r\n\r\nexport default function (state=initialState, actions) {\r\n    switch (actions.type) {\r\n        case SEARCH_SONGS:\r\n            return {\r\n                ...state,\r\n                text: actions.payload,\r\n                loading: false\r\n            };\r\n        case FETCH_SONGS:\r\n            return {\r\n                ...state,\r\n                songs: actions.payload,\r\n                loading: false\r\n            };\r\n        case LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport searchReducer from './searchReducer';\r\n\r\nexport default combineReducers({\r\n    songs: searchReducer\r\n});","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\r\nimport rootReducer from './reducers';\r\n\r\nconst middleWare = [thunk];\r\nconst initalState = {};\r\n\r\nconst store = createStore(rootReducer, initalState, composeWithDevTools(applyMiddleware(...middleWare)));\r\n\r\nexport default store;","import React, { Component } from 'react'\n\nimport { Provider } from 'react-redux'\n\nimport './App.css';\nimport LandingWithSearch from './components/landing';\n\nimport store from './store'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Provider store={store}>\n          <LandingWithSearch />\n        </Provider>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}